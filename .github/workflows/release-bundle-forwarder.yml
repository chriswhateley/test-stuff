name: Release Bundle forwarding workflow
on:
  workflow_dispatch:
    inputs:
      name:
        description: 'Bundle to forward'
        required: true
        default: 'default bundle'
      release_bundle:
        required: false
      bundle_version:
        required: false
      artifact_path:
        description: 'Artifact path'
        required: false
        default: '/'

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

jobs:
  forward_bundle:
    runs-on: ubuntu-latest
    steps:
    - name: Unpack hook payload
      run: |
        echo "Forwarding bundle: ${{inputs.release_bundle}} version [${{inputs.bundle_version}}] from ${{inputs.name}}"
        echo "Data: ${{inputs.name}}"
    
    - name: Debugging oidc
      uses: actions/github-script@v6
      id: script
      timeout-minutes: 10
      with:
        debug: true
        script: |
          const token = process.env['ACTIONS_RUNTIME_TOKEN']
          const runtimeUrl = process.env['ACTIONS_ID_TOKEN_REQUEST_URL']
          core.setOutput('TOKEN', token.trim())
          core.setOutput('IDTOKENURL', runtimeUrl.trim())
          
    - name: JWT Debugging
      run: |
        IDTOKEN=$(curl -H "Authorization: bearer  ${{steps.script.outputs.TOKEN}}" ${{steps.script.outputs.IDTOKENURL}}  -H "Accept: application/json; api-version=2.0" -H "Content-Type: application/json" -d "{}" | jq -r '.value')
        echo $IDTOKEN
        jwtd() {
            if [[ -x $(command -v jq) ]]; then
                jq -R 'split(".") | .[0],.[1] | @base64d | fromjson' <<< "${1}"
                echo "Signature: $(echo "${1}" | awk -F'.' '{print $3}')"
            fi
        }
        jwtd $IDTOKEN
        echo "idToken=${IDTOKEN}" >> $GITHUB_OUTPUT
      id: tokenid
      
    - name: Setup OIDC
      uses: jfrog/setup-jfrog-cli@v4
      env:
        JF_URL: https://psazuse.jfrog.io
      with:
        oidc-provider-name: chriswhgithub 
        oidc-audience: jfrog-github

    - name: Export bundle
      run: jf rbe ${{inputs.release_bundle}} ${{inputs.bundle_version}}

    - name: Extract signing key
      run: echo "Pulling signing keys"

    - name: Import signing keys
      run: echo "Push signing keys to target instance"

    - name: Import bundle to target node
      run: |
        echo "Importing bundle"
        jf rbi ./bundlename.zip

        
      
